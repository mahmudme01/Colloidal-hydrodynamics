% change the file name to vsedfield.m
% This code describes a function which calculates pairwise velocity fields
% x, y, z is the component of position vector r of all particles from entrianed particle P
% centrx,centry,centrz is the location of all particles
% rlength represents simulation size in radius
% a is particle raidus
% F is gravity force on the particle
% vsedtheta describes orientation of the gravity force with respect to horizontal axis

function [vx,vy,vz] = vsedfield(x,y,z,centrx,centry,centrz,rlength,a,F,vsedtheta)
mu = 8.9e-4;         						%viscosity of water
r = sqrt(x.^2+y.^2+z.^2);
h=centrz;            						%height from the wall    
R = sqrt(x.^2+y.^2+(z+2.*h).^2); 				%See figure 1 main text
z2 = z+2.*h;  							%Z component of R

%%compute reduce gravity force
r1 = sqrt(centrx.^2+centry.^2);					% r1, h1 for measuring particle radial distance from the side wall
h1 = sqrt(((rlength./r1-1).*centrx).^2+((rlength./r1-1).*centry).^2);

F1 = F*cos(vsedtheta);
F2 = F*sin(vsedtheta);

  aa=find(centrx>0);						%find theta for coordinate transformation
     theta(aa)=pi/2+atan(centry(aa)./centrx(aa));
  bb=find(centrx<0);
     theta(bb)=3*pi/2+atan(centry(bb)./centrx(bb));
  cc=find(centrx==0);
     theta(cc)=0;
     
  theta=theta'; 						
     
  F11=F1.*cos(theta)+F2.*sin(theta);  				%transform to new coordinate
  F31=-F1.*sin(theta)+F2.*cos(theta);
  F21(1:size(F11),1)=0;
  
  F11=(1-9*a./(16.*h1)).*F11;					%calculate reduced force
  F31=(1-9*a./(8.*h1)).*F31;
  
  F1=F11.*cos(theta)-F31.*sin(theta);				%transform back to previous coordinate
  F2=F11.*sin(theta)+F31.*cos(theta);

%% long range- point force- solid wall image reflection
  vx = (F1.*((1./r-1./R)+(x.^2)./r.^3-(x.^2)./R.^3) + ...
      F2.*(x.*y./r.^3-x.*y./R.^3)+ ...
      2*F1.*h.*(h./R.^3-3.*h.*x.^2./R.^5-z2./R.^3+3.*z2.*x.^2./R.^5)+...
      2*F2.*h.*(-3.*h.*x.*y./R.^5+3.*x.*y.*z2./R.^5))/(8*pi*mu);
  
  vy = (F2.*((1./r-1./R)+(y.^2)./r.^3-(y.^2)./R.^3) + ...
      F1.*(x.*y./r.^3-x.*y./R.^3)+ ...
      2*F2.*h.*(h./R.^3-3.*h.*y.^2./R.^5-z2./R.^3+3.*z2.*y.^2./R.^5)+...
      2*F1.*h.*(-3.*h.*x.*y./R.^5+3.*x.*y.*z2./R.^5))/(8*pi*mu);
  
  vz = (F1.*(x.*z./r.^3-x.*z2./R.^3) + ...
      F2.*(y.*z./r.^3-y.*z2./R.^3)+ ...
      2*F1.*h.*(-3.*h.*z2.*x./R.^5+x./R.^3+3.*x.*z2.^2./R.^5)+...
      2*F2.*h.*(-3.*h.*z2.*y./R.^5+y./R.^3+3.*y.*z2.^2./R.^5))/(8*pi*mu);
    
 %%short range- source dipole
  A = (F1.*x+F2.*y)./r;
  
  vx1 = (((a^2)./(3*(r.^2))).*(F1-3.*A.*x./r))./(8*pi*mu.*r);
  vy1 = (((a^2)./(3*(r.^2))).*(F2-3.*A.*y./r))./(8*pi*mu.*r);
  vz1 = -(((a^2)./(3*(r.^2))).*(3.*A.*z./r))./(8*pi*mu.*r);
  
  vxx = vx1+vx;
  vyy = vy1+vy;
  vzz = vz1+vz;
  
 %%short range- particle rotation
  omega_x = (y.*vzz-z.*vyy)./(a.*r);
  omega_y = (z.*vxx-x.*vzz)./(a.*r);
  omega_z = (x.*vyy-y.*vxx)./(a.*r);
  
  vx2 = (a^3)*(omega_y.*z-y.*omega_z)./r.^3;
  vy2 = (a^3)*(omega_z.*x-z.*omega_x)./r.^3;
  vz2 = (a^3)*(omega_x.*y-x.*omega_y)./r.^3;
  
  ux=vx1+vx2;
  uy=vy1+vy2;
  uz=vz1+vz2;

  kk=find(centrz<2*a); 						%account wall effect on the short range interaction
  ux(kk)=(vx1(kk)+vx2(kk)).*centrz(kk)/(2*a);
  uy(kk)=(vy1(kk)+vy2(kk)).*centrz(kk)/(2*a);
  uz(kk)=(vz1(kk)+vz2(kk)).*centrz(kk)/(2*a);

  vx = vx+ux;
  vy = vy+uy;
  vz = vz+uz;  

          m=find(r==0);						%calculate velocity for the entrained particle itself
    vx(m) = (1-9*a/(16*h(m))).*F1(m)/(6*pi*mu*a);
    vy(m) = (1-9*a/(16*h(m))).*F2(m)/(6*pi*mu*a);
    vz(m) = 0;
    
    clear m
end
